@startuml Open fork

package "UseCases.DashboardBalances" {
    DashboardBalancesUseCase --> IDashboardBalancesOutput 
    IDashboardBalancesIntput <|-- DashboardBalancesUseCase 
    IDashboardBalancesOutput --> GetDashboardBalancesResponse 
    DashboardBalancesUseCase --> GetDashboardBalancesRequest
}

package "Entities.ValueObjects" {
    TransactionCollection <-- DashboardBalancesUseCase
}

package "UseCases.Repositories" {
    IAccountQueriesRepository <-- DashboardBalancesUseCase
    IAccountQueriesRepository <-- TransactionCollection
}

interface IDashboardBalancesIntput {
    {method} + Execute(GetDashboardBalancesRequest ,IDashboardBalancesOutput);
}

interface IDashboardBalancesOutput {
    {method} + Results(GetDashboardBalancesResponse);
}

interface IAccountQueriesRepository {
    {method} + GetAccountById(id) : FinancialAccount
    {method} + GetCurrentMonthTransactions(accountId) : Transaction [0-n]
}
class GetDashboardBalancesRequest {
    {field} - AccountId: string [1]

    {method} + GetDashboardBalancesRequest(accountId: string);
}
class GetDashboardBalancesResponse {
    {field} + AccountTransactions : Transaction [0-n]
    {field} + CategoriesBalances : Transaction [0-n]

    {method} + GetDashboardBalancesResponse(AccountTransactions, CategoriesBalances);
}

class DashboardBalancesUseCase {
    {method} + Execute(GetDashboardBalancesRequest, IDashboardBalancesOutput);
}

class TransactionCollection {
    {field} + Transaction[] Items => _transactions.ToArray()
    {field} - _transactions: Stack<Transaction>

    {method} + GetItems() : Transaction [0-n]
    {method} + AddTransaction(Transaction) : void
}

@enduml 